name: Backend CD Fuyu Server

on:
  push:
    branches:
      # main 또는 backend 브랜치에 푸시될(코드 변화) 때 트리거
      - main
      - backend
    paths:
      # backend 디렉토리 내의 파일 변경 시 트리거
      - 'backend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout project repository
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Gradle cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('backend/**/*.gradle*', 'backend/**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x backend/gradlew

    - name: Create application-secret.yml file
      run: |
        mkdir -p backend/src/main/resources # 디렉토리가 없을 경우 생성
        echo "starting to create application-secret.yml file"
        echo "${{ secrets.SECRET_YML }}" > backend/src/main/resources/application-secret.yml
        echo "application-secret.yml file created successfully"

    - name: Create firebase-adminsdk-account.json file
      run: |
        mkdir -p backend/src/main/resources/firebase
        echo "${{ secrets.FIREBASE_ADMINSDK_ACCOUNT_KEY }}" > backend/src/main/resources/firebase/firebase-adminsdk-account.json

    - name: Build with Gradle
      run: ./gradlew clean build
      working-directory: ./backend # 우리 레포지토리 구조가 backend 디렉토리 안에 gradlew가 존재함.

    # 러너에서 빌드된 jar 파일 이름과 경로를 변수로 저장하기
    - name: Get jar file name and path
      id: get_jar_name
      run: |
        JAR_FILE=$(find ./backend/build/libs -name "*.jar" ! -name "*plain.jar" | head -n 1)
        echo "JAR_FILE_PATH=${JAR_FILE}" >> $GITHUB_OUTPUT
        echo "JAR_FILE_NAME=$(basename ${JAR_FILE})" >> $GITHUB_OUTPUT

    # Spring WAS 종료 및 jar 파일 삭제
    - name: Ubuntu close Spring WAS and delete old jar file
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.FUYU_SSH_HOST }}
        port: ${{ secrets.FUYU_SSH_PORT }}
        username: ${{ secrets.FUYU_SSH_USERNAME }}
        key: ${{ secrets.FUYU_SSH_PRIVATE_KEY }}
        script: |
          # Ubuntu jar 파일 경로 설정 및 생성
          REMOTE_APP_DIR="/home/${{ secrets.FUYU_SSH_USERNAME }}/${{ github.event.repository.name }}/backend"
          mkdir -p "${REMOTE_APP_DIR}"
          REMOTE_JAR_PATH="${REMOTE_APP_DIR}/${{ steps.get_jar_name.outputs.JAR_FILE_NAME }}"
          echo "Deploying to ${REMOTE_JAR_PATH}"
          
          # Spring WAS (:8080) 종료
          PID=$(lsof -t -i:8080 || true)
          if [ -n "$PID" ]; then
            echo "Found running process with PID: $PID. Sending SIGTERM for graceful shutdown."
            kill -SIGTERM $PID
            
            # 프로세스 종료 대기
            for i in $(seq 1 20); do
              if ! kill -0 $PID 2>/dev/null; then # `kill -0 $PID` 프로세스 살아있으면 true 응답. !가 존재하니 프로세스가 살아있으면 false가 됨.
                echo "Process $PID has terminated."
                break
              fi
              echo "Waiting for process $PID to terminate... ($i/20)"
              sleep 1
            done

            # SIGTERM 종료 명령 후 프로세스 생존시 강제 종료
            if kill -0 $PID 2>/dev/null; then
              echo "Process $PID did not terminate gracefully. Forcing shutdown with SIGKILL."
              kill -9 $PID
            fi
          else
            echo "No process found using port 8080."
          fi

          # Old jar 파일 삭제
          if [ -d "${REMOTE_APP_DIR}" ]; then
              find "${REMOTE_APP_DIR}" -maxdepth 1 -name "*.jar" -delete
              echo "Old server stopped and old jar files deleted from ${REMOTE_APP_DIR}."
          else
              echo "Deployment directory not found: ${REMOTE_APP_DIR}. Skipping old jar file deletion."
          fi

    # 전송 경로 문제를 해결하기 위해 프로젝트 루트로 JAR 파일 복사
    # scp source에  ${{ steps.get_jar_name.outputs.JAR_FILE_PATH }} 사용시
    # /home/***/github-action-CD-test/backend/backend/build/libs/demo-0.0.1-SNAPSHOT.jar 모습으로 전송됨
    - name: Prepare file for transfer
      run: cp ${{ steps.get_jar_name.outputs.JAR_FILE_PATH }} ./${{ steps.get_jar_name.outputs.JAR_FILE_NAME }}

    # 러너에서 빌드된 jar 파일 우분투로 이동
    - name: Transfer jar file to Ubuntu Server
      uses: appleboy/scp-action@master # SCP를 통해 파일 전송
      with:
        host: ${{ secrets.FUYU_SSH_HOST }}
        port: ${{ secrets.FUYU_SSH_PORT }}
        username: ${{ secrets.FUYU_SSH_USERNAME }}
        key: ${{ secrets.FUYU_SSH_PRIVATE_KEY }}
        source: ./${{ steps.get_jar_name.outputs.JAR_FILE_NAME }} # GitHub Actions runner의 JAR 파일 경로
        target: /home/${{ secrets.FUYU_SSH_USERNAME }}/${{ github.event.repository.name }}/backend # Ubuntu 서버의 대상 디렉토리

    # 우분투에서 Spring WAS 실행
    - name: Run Spring Boot Application
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.FUYU_SSH_HOST }}
        port: ${{ secrets.FUYU_SSH_PORT }}
        username: ${{ secrets.FUYU_SSH_USERNAME }}
        key: ${{ secrets.FUYU_SSH_PRIVATE_KEY }}
        script: |
          REMOTE_APP_DIR="/home/${{ secrets.FUYU_SSH_USERNAME }}/${{ github.event.repository.name }}/backend"
          JAR_FILE_NAME="${{ steps.get_jar_name.outputs.JAR_FILE_NAME }}"
          JAR_PATH="${REMOTE_APP_DIR}/${JAR_FILE_NAME}"

          echo "--- Starting Deployment ---"
          echo "Remote App Directory: ${REMOTE_APP_DIR}"
          echo "JAR File Name: ${JAR_FILE_NAME}"
          echo "Attempting to run JAR at: ${JAR_PATH}"
          
          echo "Listing contents of the deployment directory..."
          ls -la "${REMOTE_APP_DIR}"
          
          if [ -f "${JAR_PATH}" ]; then
            echo "JAR file found. Starting application..."
            nohup java -jar "${JAR_PATH}" > "${REMOTE_APP_DIR}/application.log" 2>&1 &
            echo "Application start command issued."
          else
            echo "ERROR: JAR file not found at the expected path!"
            exit 1
          fi
